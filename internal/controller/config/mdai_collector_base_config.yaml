receivers:
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:4318
  k8s_events:
    namespaces:
      - '${env:K8S_NAMESPACE}'
# grafana logger=plugins.update.checker t=2025-05-20T16:31:09.097731628Z level=info msg="Update check succeeded" duration=245.722667ms
# prometheus ts=2025-05-20T07:00:01.506Z caller=head.go:1317 level=info component=tsdb msg="WAL checkpoint complete" first=0 last=1 duration=121.856792ms
# alertmanager ts=2025-05-15T17:57:43.430Z caller=coordinator.go:126 level=info component=configuration msg="Completed loading of configuration file" file=/etc/alertmanager/config_out/alertmanager.env.yaml
# 1:M 15 May 2025 17:57:29.714 * Creating AOF incr file appendonly.aof.1.incr.aof on server start
  filelog/prom:
    include:
      - /var/log/containers/mdai-prometheus*.log
      - /var/log/containers/mdai-alertmanager*.log
    start_at: end
    include_file_name: true
    include_file_path: true
    operators:
      - type: key_value_parser
#        timestamp:
#          parse_from: "prometheus ts"
#          layout: "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"
  filelog/grafana:
    include:
      - /var/log/containers/mdai-grafana*.log
    start_at: end
    include_file_name: true
    include_file_path: true
    operators:
      - type: key_value_parser
#        timestamp:
#          parse_from: "t"
#          layout: "YYYY-MM-DDTHH:mm:ss.SSSSSSSSSZ"
  filelog/valkey:
    include:
      - /var/log/containers/mdai-valkey*.log
    start_at: end
    include_file_name: true
    include_file_path: true
    operators:
      - type: regex_parser
        regex: '^(?P<pid>\d+):(?P<role>[MSC]) (?P<day>\d{1,2}) (?P<month>[A-Za-z]{3}) (?P<year>\d{4}) (?P<time>\d{2}:\d{2}:\d{2}\.\d{3}) \* (?P<message>.+)$'
#        timestamp:
#          parse_from: time
#          layout: '%02d %s %04d %02d:%02d:%02d.%03d'
#          layout_type: strptime
#        severity:
#          parse_from: message

processors:
  batch:
    send_batch_size: 1000
    send_batch_max_size: 10000
    timeout: 13s
  filter/severity:
    error_mode: ignore
    logs:
      log_record:
        - severity_number < ${env:LOG_SEVERITY} and attributes["mdai-logstream"] != "audit"
  resource/k8slogstream:
    attributes:
      - key: mdai-logstream
        value: "hub"
        action: upsert
  resource/hub-to-audit:
    attributes:
      - key: mdai-logstream
        value: "audit"
        action: upsert

exporters:
  debug: {}
  debug/filelog: {}
  debug/audit: {}
  debug/hub: {}
  debug/collector: {}
  debug/verbose:
    verbosity: detailed

connectors:
  routing/logstream:
    default_pipelines: [logs/other]
    table:
      - context: log
        condition: attributes["mdai-logstream"] == "audit"
        pipelines: [logs/audit]
      - context: resource
        condition: attributes["mdai-logstream"] == "collector"
        pipelines: [logs/collector]
      - context: resource
        condition: attributes["mdai-logstream"] == "hub"
        pipelines: [logs/hub]

extensions:
  cgroupruntime:
    gomaxprocs:
      enabled: true
    gomemlimit:
      enabled: true

service:
  pipelines:
    logs/k8s_events:
      receivers: [k8s_events]
      processors: [resource/k8slogstream]
      exporters: [routing/logstream]
    logs/mdai_components:
      receivers: [filelog/prom, filelog/grafana, filelog/valkey]
      processors: [resource/k8slogstream, batch]
      exporters: [routing/logstream, debug/filelog]
    logs/input:
      receivers: [otlp]
      processors: [filter/severity, batch]
      exporters: [routing/logstream]

    logs/audit:
      receivers: [routing/logstream]
      processors: [resource/hub-to-audit, batch]
      exporters: [debug/audit]
    logs/hub:
      receivers: [routing/logstream]
      processors: [batch]
      exporters: [debug/hub]
    logs/collector:
      receivers: [routing/logstream]
      processors: [batch]
      exporters: [debug/collector]
    logs/other:
      receivers: [routing/logstream]
      processors: [filter/severity, batch]
      exporters: [debug]