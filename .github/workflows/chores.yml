name: Chores

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref_name || github.run_id }}
  cancel-in-progress: true

jobs:
  lint:
    name: Lint on Ubuntu
    runs-on: ubuntu-latest
    steps:
      - name: Clone the code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Run linter
        uses: golangci/golangci-lint-action@v8
        with:
          version: v2.1.6

  check-go-file-changes:
    name: Check if Go files changed
    runs-on: ubuntu-latest
    needs: lint
    outputs:
      go_files_changed: ${{ steps.check.outputs.go_files_changed }}
    steps:
      - name: Clone the code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full history to compare commits

      - name: Determine base commit
        id: base
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            BASE_COMMIT="${{ github.event.pull_request.base.sha }}"
          else
            BASE_COMMIT=$(git rev-parse HEAD~1)  # Previous commit on main
          fi
          echo "BASE_COMMIT=$BASE_COMMIT"
          echo "BASE_COMMIT=$BASE_COMMIT" >> "$GITHUB_ENV"

      - name: Check for Go-related file changes
        id: check
        run: |
          # Fetch latest main branch
          git fetch origin main
          
          # Find changed Go files (excluding _test.go and vendor/)
          CHANGED_FILES=$(git diff --name-only "$BASE_COMMIT" HEAD -- '**/*.go' 'go.mod' 'go.sum' | grep -vE '^vendor/' || true)
          
          # Define output file path
          OUTPUT_FILE=".github/outputs/all_changed_files.json"
          mkdir -p .github/outputs  # Ensure the directory exists
          
          if [[ -z "$CHANGED_FILES" ]]; then
            echo "No relevant Go file changes detected."
            echo "go_files_changed=false" >> "$GITHUB_OUTPUT"
            echo "[]" > "$OUTPUT_FILE"  # Save empty JSON array
          else
            echo "Relevant Go file changes detected."
            echo "go_files_changed=true" >> "$GITHUB_OUTPUT"
          
            # Convert to JSON format and save to file
            echo "$CHANGED_FILES" | jq -R . | jq -s . > "$OUTPUT_FILE"
          fi

      - name: Upload changed files record
        uses: actions/upload-artifact@v4
        with:
          name: changed-files
          path: .github/outputs/all_changed_files.json

  test:
    name: Test on Ubuntu
    runs-on: ubuntu-latest
    needs: [ lint, check-go-file-changes ]
    if: needs.check-go-file-changes.outputs.go_files_changed == 'true'
    steps:
      - name: Clone the code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Running Tests
        run: |
          go mod vendor
          go mod tidy
          make test-coverage

      - name: Archive code coverage results
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage
          path: coverage.out

  test-e2e:
    name: E2E tests on Ubuntu
    needs: [ lint, test ]
    if: needs.lint.result == 'success' && (needs.test.result == 'success' || needs.test.result == 'skipped')
    runs-on: ubuntu-latest
    steps:
      - name: Clone the code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Set up kind
        uses: helm/kind-action@v1.12.0
        with:
          version: v0.29.0
          wait: 60s
          cluster_name: kind

      - name: Running Test e2e
        run: |
          go mod vendor
          go mod tidy
          make test-e2e