name: Chores

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref_name || github.run_id }}
  cancel-in-progress: true

env:
  GOPRIVATE: github.com/decisiveai/opentelemetry-operator
  TOKEN: ${{ secrets.TOKEN_OPERATOR }}

jobs:
  lint:
    name: Lint on Ubuntu
    runs-on: ubuntu-latest
    steps:
      - name: Configure git for private modules
        run: git config --global url."https://user:${TOKEN}@github.com".insteadOf "https://github.com"

      - name: Clone the code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Run linter
        uses: golangci/golangci-lint-action@v6
        with:
          version: v1.63.4

  check-go-file-changes:
    name: Check if Go files changed
    runs-on: ubuntu-latest
    needs: lint
    outputs:
      go_files_changed: ${{ steps.check.outputs.go_files_changed }}
    steps:
      - name: Configure git for private modules
        run: git config --global url."https://user:${TOKEN}@github.com".insteadOf "https://github.com"

      - name: Clone the code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2 # Ensures we can compare with the previous commit

      - name: Check for Go-related file changes
        id: check
        run: |
          # Fetch the latest main branch state
          git fetch origin main

          # Compare the triggering commit with the latest commit on main
          if git diff --quiet ${{ github.sha }} origin/main -- '**/*.go' 'go.mod' 'go.sum'; then
            echo "No relevant Go file changes detected."
            echo "go_files_changed=false"
            echo "go_files_changed=false" >> "$GITHUB_OUTPUT"
          else
            echo "Relevant Go file changes detected."
            echo "go_files_changed=true"
            echo "go_files_changed=true" >> "$GITHUB_OUTPUT"
          fi

  test:
    name: Test on Ubuntu
    runs-on: ubuntu-latest
    needs: [ lint, check-go-file-changes ]
    if: needs.check-go-file-changes.outputs.go_files_changed == 'true'
    steps:
      - name: Configure git for private modules
        run: git config --global url."https://user:${TOKEN}@github.com".insteadOf "https://github.com"

      - name: Clone the code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Running Tests
        run: |
          go mod vendor
          go mod tidy
          make test-coverage

      - name: Archive code coverage results
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage
          path: coverage.out

  report-coverage:
    name: Report code coverage
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'pull_request'
    steps:
      - name: Download coverage artifact
        uses: actions/download-artifact@v4
        with:
          name: code-coverage
          path: .

      - name: List downloaded files (debugging)
        run: ls -R

      - name: Generate Code Coverage Report
        uses: fgrosse/go-coverage-report@v1.1.1
        id: report
        with:
          coverage-artifact-name: code-coverage
          coverage-file-name: coverage.out

  coverage-badge:
    name: Update coverage badge on README
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Download coverage artifact
        uses: actions/download-artifact@v4
        with:
          name: code-coverage
          path: .

      - name: List downloaded files (debugging)
        run: ls -R

      - name: Generate Go Coverage Badge
        id: generate-badge
        uses: tj-actions/coverage-badge-go@v2
        with:
          filename: coverage.out

      - name: Verify Changed README
        if: steps.generate-badge.outcome == 'success'
        id: verify-changed-readme
        run: |
          if git diff --quiet HEAD^ HEAD -- README.md; then
            echo "README.md has NOT changed."
            echo "readme_changed=false" >> $GITHUB_ENV
          else
            echo "README.md has changed."
            echo "readme_changed=true" >> $GITHUB_ENV
          fi

      - name: Commit changes
        if: env.readme_changed == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add README.md
          git commit -m "chore: Updated coverage badge."

  capture-coverage:
    name: Capture coverage in platform_health repo
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Download coverage artifact
        uses: actions/download-artifact@v4
        with:
          name: code-coverage
          path: .

      - name: List downloaded files (debugging)
        run: ls -R

      - name: Capture coverage in health repo
        run: |
          go install github.com/axw/gocov/gocov@latest
          gocov convert coverage.out | gocov report > coverage-operator.txt

      - name: Generate GitHub App Token
        id: generate_token
        env:
          GH_APP_ID: ${{ secrets.GH_APP_ID }}
          GH_APP_PRIVATE_KEY: ${{ secrets.GH_APP_PRIVATE_KEY }}
        run: |
          # Convert the private key to a temporary file
          echo "$GH_APP_PRIVATE_KEY" > private-key.pem

          # Generate JWT (valid for 10 minutes)
          NOW=$(date +%s)
          EXP=$((NOW + 600))  # Token expires in 10 minutes
          JWT=$(gh auth token --hostname github.com --app-id "$GH_APP_ID" --private-key private-key.pem)

          # Get installation ID for the app
          INSTALLATION_ID=$(gh api /app/installations \
            -H "Authorization: Bearer $JWT" \
            -H "Accept: application/vnd.github+json" \
            --jq '.[0].id')

          # Get installation access token
          GH_TOKEN=$(gh api /app/installations/$INSTALLATION_ID/access_tokens \
            -H "Authorization: Bearer $JWT" \
            -H "Accept: application/vnd.github+json" \
            --jq '.token')

          # Mask the token in logs
          echo "::add-mask::$GH_TOKEN"

          # Store in environment
          echo "GH_TOKEN=$GH_TOKEN" >> $GITHUB_ENV

      - name: Set safe git directory
        run: git config --global --add safe.directory '*'

      - name: Commit coverage to health repo
        env:
          GH_TOKEN: ${{ env.GH_TOKEN }}
        run: |
          git clone https://x-access-token:${GH_TOKEN}@github.com/DecisiveAI/platform-health.git
          cd platform-health
          
          # Configure git
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
          
          # Copy the new coverage file
          cp ../coverage-operator.txt .
          
          # Commit and push changes
          git add coverage-operator.txt
          if git diff --cached --quiet; then
            echo "âœ… No changes to commit."
            exit 0
          fi
          git commit -m "chore: Update coverage report from CI"
          git push origin main


  test-e2e:
    name: E2E tests on Ubuntu
    needs: [ lint, test ]
    if: success() || (needs.test.result == 'skipped')
    runs-on: ubuntu-latest
    steps:
      - name: Configure git for private modules
        run: git config --global url."https://user:${TOKEN}@github.com".insteadOf "https://github.com"

      - name: Clone the code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Install the latest version of kind
        run: |
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/latest/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/kind

      - name: Verify kind installation
        run: kind version

      - name: Create kind cluster
        run: kind create cluster

      - name: Running Test e2e
        run: |
          go mod vendor
          go mod tidy
          make test-e2e
