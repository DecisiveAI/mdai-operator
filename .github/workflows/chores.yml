name: Chores

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  GOPRIVATE: github.com/decisiveai/opentelemetry-operator
  TOKEN: ${{ secrets.TOKEN_OPERATOR }}

jobs:
  lint:
    name: Lint on Ubuntu
    runs-on: ubuntu-latest
    steps:
      - name: Configure git for private modules
        run: git config --global url."https://user:${TOKEN}@github.com".insteadOf "https://github.com"

      - name: Clone the code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Run linter
        uses: golangci/golangci-lint-action@v6
        with:
          version: v1.63.4

  check-go-file-changes:
    name: Check if Go files changed
    runs-on: ubuntu-latest
    needs: lint
    outputs:
      go_files_changed: ${{ steps.check.outputs.go_files_changed }}
    steps:
      - name: Clone the code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2 # Ensures we can compare with the previous commit

      - name: Check for Go-related file changes
        id: check
        run: |
          if git diff --quiet HEAD^ HEAD -- '**/*.go' 'go.mod' 'go.sum'; then
            echo "No relevant Go file changes detected."
            echo "go_files_changed=false" >> $GITHUB_ENV
            echo "::set-output name=go_files_changed::false"
          else
            echo "Relevant Go file changes detected."
            echo "go_files_changed=true" >> $GITHUB_ENV
            echo "::set-output name=go_files_changed::true"
          fi

  test:
    name: Test on Ubuntu
    runs-on: ubuntu-latest
    needs: [ lint, check-go-file-changes ]
    if: needs.check-go-file-changes.outputs.go_files_changed == 'true'
    steps:
      - name: Configure git for private modules
        run: git config --global url."https://user:${TOKEN}@github.com".insteadOf "https://github.com"

      - name: Clone the code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Running Tests
        run: |
          go mod vendor
          go mod tidy
          make test-coverage

      - name: Archive code coverage results
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage
          path: coverage.out

      - name: Generate Code Coverage Report
        if: github.event_name == 'pull_request'
        uses: fgrosse/go-coverage-report@v1.1.1
        id: report
        with:
          coverage-artifact-name: code-coverage
          coverage-file-name: coverage.out
          skip-comment: 'true'

      - name: Generate Go Coverage Badge
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        id: generate-badge
        uses: tj-actions/coverage-badge-go@v2
        with:
          filename: coverage.out

      - name: Verify Changed files
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && steps.generate-badge.outcome == 'success'
        uses: tj-actions/verify-changed-files@v16
        id: verify-changed-files
        with:
          files: README.md

      - name: Commit changes
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && steps.verify-changed-files.outputs.files_changed == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add README.md
          git commit -m "chore: Updated coverage badge."

      - name: Push changes
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && steps.verify-changed-files.outputs.files_changed == 'true'
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ github.token }}
          branch: ${{ github.head_ref }}

      - name: Capture coverage in health repo
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          go install github.com/axw/gocov/gocov@latest
          gocov convert coverage.out | gocov report > coverage-operator.txt

      - name: Commit coverage to health repo
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Setup SSH access
          mkdir -p ~/.ssh
          echo "${{ secrets.DEPLOY_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          
          # Clone the target repository
          git clone git@github.com:DecisiveAI/platform-health.git
          cd platform-health

          # Configure git
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"

          # Copy the new coverage file
          cp ../coverage-operator.txt .

          # Commit and push changes
          git add coverage-operator.txt
          git commit -m "chore: Update coverage report from CI"
          git push origin main
          

  test-e2e:
    name: E2E tests on Ubuntu
    needs: [ lint, test ]
    if: success() || (needs.test.result == 'skipped')
    runs-on: ubuntu-latest
    steps:
      - name: Configure git for private modules
        run: git config --global url."https://user:${TOKEN}@github.com".insteadOf "https://github.com"

      - name: Clone the code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Install the latest version of kind
        run: |
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/latest/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/kind

      - name: Verify kind installation
        run: kind version

      - name: Create kind cluster
        run: kind create cluster

      - name: Running Test e2e
        run: |
          go mod vendor
          go mod tidy
          make test-e2e
